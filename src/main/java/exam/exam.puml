@startuml

package Examination <<Aggregate>> {
class Examination <<Aggregate Root>> {
    examinationId: ExaminationId
    courseId: CourseId
    teacherId: String
    paper: Paper
    createTime: Date
    startTime: Date
    endTime: Date

    create(): Examination
    start()
}

class "Paper" as a <<Value Object>> {
    blankQuizzes: List<BlankQuiz>
}

class "BlankQuiz" as eb <<Value Object>> {
    content: String
    score: Int
}

Examination "1" *--> "1" a
a "1" *--> "5..20" eb
}

package Paper <<Aggregate>> {
    class Paper <<Aggregate Root>> {
        paperId: PaperId
        blankQuizzes: List<BlankQuiz>
        createTime: Date
        updateTime: Date

        assemble(): Paper
        reAssemble(): Paper
    }

    class "BlankQuiz" as pb <<Value Object>> {
         content: String
         score: Int
    }
    Paper "1" *--> "5..20" pb
}

package AnswerSheet <<Aggregate>> {
class AnswerSheet <<Aggregate Root>> {
    answerSheetId: AnswerSheetId
    examinationId: ExaminationId
    studentId: StudentId
    score: Int
    blankQuizzes: List<BlankQuiz>

    assignStudent(): AnswerSheet
    handIn(): void
    review(): int
}

class "BlankQuiz" as ab <<Value Object>> {
    content: String
    answer: String
    referenceAnswer: String
    score: int
    gotScore: int
}

AnswerSheet "1" *--> "*" ab
}

package BlankQuiz <<Aggregate>> {
class "BlankQuiz" as bq <<Aggregate Root>> {
    blankQuizId: BlankQuizId
    content: String
    referenceAnswer: String

    create(): BlankQuiz
    update(): BlankQuiz
    delete(): void
}
}

package Course <<Aggregate>> {
class "Course" <<Aggregate Root>> {
courseId: CourseId
create(): Course
publish(): Course
}
}

package Certification <<Aggregate>> {
class Certification <<Aggregate Root>> {
certificationId: CertificationId
courseId: CourseId
studentId: StudentId

generate(): Certification
}
}

@enduml
